import os, re
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackContext, filters, CommandHandler
from dotenv import load_dotenv
from telegram.constants import ChatType
from pathlib import Path
import json
from urllib.parse import urlparse, urljoin
from telegram._chatmember import ChatMemberAdministrator, ChatMemberOwner
from telegram.constants import ChatType
from telegram.error import TelegramError, Forbidden, BadRequest
import html

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook").strip()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").strip()
PORT = int(os.getenv("PORT", 5000))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
request_counter = 0

# –é–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–º–∞—Å–ª–∏–≥–∏ –∫–µ—Ä–∞–∫ –±—û–ª–≥–∞–Ω user ID
ALLOWED_USER_ID = 1294217711
ALLOWED_USER_NAME = "jajglobal"

# ID–ª–∞—Ä –≤–∞ username‚Äô–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ .env –æ—Ä“õ–∞–ª–∏ “≥–∞–º –±–µ—Ä–∏–ª—Å–∞ –±—û–ª–∞–¥–∏:
ALLOWED_USER_IDS = {
    int(x) for x in os.getenv("ALLOWED_USER_IDS", "747789912").split(",")
    if x.strip().isdigit()
}
ALLOWED_USERNAMES = {
    u.strip().lower() for u in os.getenv("ALLOWED_USERNAMES", "").split(",")
    if u.strip()
}


def build_full_webhook_url(base: str, path: str) -> str | None:
    if not base:
        return None
    base = base.rstrip("/") + "/"
    path = path.lstrip("/")
    return urljoin(base, path)

def is_valid_public_https(url: str) -> bool:
    try:
        u = urlparse(url)
        if u.scheme != "https" or not u.netloc:
            return False
        bad_hosts = ("127.", "10.", "192.168.", "localhost")
        return not any((u.hostname or "").startswith(b) for b in bad_hosts)
    except Exception:
        return False

FULL_WEBHOOK_URL = build_full_webhook_url(WEBHOOK_BASE, WEBHOOK_PATH)
print(f"Webhook URL candidate: {FULL_WEBHOOK_URL!r}")

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def is_from_specific_bot(update: Update, bot_username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º."""
    if update.message and update.message.from_user:
        return update.message.from_user.username == bot_username
    return False

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å @
def contains_mention_link(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å @,
       –∏ –ø–æ–º–µ—á–∞–µ—Ç –µ—ë —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç -1001294217711."""
    if not update.message:
        return False

    chat_id = update.message.chat.id
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ‚Äú–±–µ–ª–æ–π‚Äù –≥—Ä—É–ø–ø—ã, –Ω–µ –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ
    if chat_id == -1001294217711:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å—å
    text    = update.message.text    or ""
    caption = update.message.caption or ""
    if "@" in text or "@" in caption:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(update.message, "forward_from") and update.message.forward_from:
        forwarded_text = update.message.text or ""
        if "@" in forwarded_text:
            return True

    return False

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ —Å—Å—ã–ª–æ–∫

# --- –î–∏–Ω–∞–º–∏–∫ —Ä–µ–∫–ª–∞–º–∞ —Å—û–∑–ª–∞—Ä–∏ –∫–æ–Ω—Ñ–∏–≥–∏ ---
KEYWORDS_FILE = Path(os.getenv("AD_KEYWORDS_FILE", "ad_keywords.json"))

# –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ “õ—û—à–≥–∞–Ω (–¥–∏–Ω–∞–º–∏–∫) —Å—û–∑–ª–∞—Ä
AD_CUSTOM_KEYWORDS: set[str] = set()

def load_custom_keywords() -> None:
    try:
        if KEYWORDS_FILE.exists():
            data = json.loads(KEYWORDS_FILE.read_text(encoding="utf-8"))
            if isinstance(data, list):
                AD_CUSTOM_KEYWORDS.update([str(x).lower() for x in data])
    except Exception as e:
        print(f"‚ö†Ô∏è –ö–ª—é—á —Å—û–∑–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

def save_custom_keywords() -> None:
    try:
        KEYWORDS_FILE.write_text(
            json.dumps(sorted(list(AD_CUSTOM_KEYWORDS)), ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –ö–ª—é—á —Å—û–∑–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")


# “≤–∞–º–º–∞—Å–∏–Ω–∏ –±–∏—Ä–ª–∞—à—Ç–∏—Ä–∞–¥–∏–≥–∞–Ω —Ö–µ–ª–ø–µ—Ä
def all_keywords_lower() -> set[str]:
    # –§–∞“õ–∞—Ç custom (ad_keywords.json)–≥–∞ —Ç–∞—è–Ω–∞–º–∏–∑
    return {str(k).lower() for k in AD_CUSTOM_KEYWORDS}


# –ú–æ–¥—É–ª —é–∫–ª–∞–Ω–∏—à–∏–¥–∞ –∫–∞—Å—Ç–æ–º —Å—û–∑–ª–∞—Ä–Ω–∏ –æ—á–∏–± –æ–ª–∞–º–∏–∑
load_custom_keywords()


def contains_advertisement(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–ª–æ–≤–∞."""
    if not update.message:
        return False

    chat_id = update.message.chat.id
    text    = update.message.text    or ""
    caption = update.message.caption or ""

    url_pattern = r"(https?://|http://|www\.)\S+"

    # 1) URL —Ç–µ–∫—à–∏—Ä—É–≤–∏ (–æ“õ —Ä—û–π—Ö–∞—Ç–¥–∞–≥–∏ –≥—É—Ä—É“≥–¥–∞–Ω —Ç–∞—à“õ–∞—Ä–∏–¥–∞)
    if re.search(url_pattern, text):
        if chat_id != -1001294217711:
            return True

    # 2) –ö–ª—é—á —Å—û–∑/–∏–±–æ—Ä–∞–ª–∞—Ä–≥–∞ —Ç–µ–∫—à–∏—Ä–∏—à (—Ç–µ–∫—Å—Ç–¥–∞)
    lower_text = text.lower()
    if any(k in lower_text for k in all_keywords_lower()):
        return True

    # 3) URL —Ç–µ–∫—à–∏—Ä—É–≤–∏ ‚Äì —Å–∞—Ä–ª–∞–≤“≥–∞–¥–∞
    if re.search(url_pattern, caption):
        if chat_id != -1001294217711:
            return True

    # 4) –ö–ª—é—á —Å—û–∑/–∏–±–æ—Ä–∞–ª–∞—Ä–≥–∞ —Ç–µ–∫—à–∏—Ä–∏—à (—Å–∞—Ä–ª–∞–≤“≥–∞–¥–∞)
    lower_caption = caption.lower()
    if any(k in lower_caption for k in all_keywords_lower()):
        return True

    return False

async def add_keyword(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    chat_id = update.message.chat_id
    user    = update.message.from_user
    user_id = user.id if user else None
    username = ((user.username or "").lower()) if user else ""

    # üîì –†—É—Ö—Å–∞—Ç: ID —ë–∫–∏ username –æ—Ä“õ–∞–ª–∏
    is_allowed = (user_id in ALLOWED_USER_IDS) or (username in ALLOWED_USERNAMES)

    if not is_allowed and user_id is not None:
        # –ì—É—Ä—É“≥–¥–∞ –∞–¥–º–∏–Ω–º–∏ —ë–∫–∏ private‚Äô–¥–∞ —ç–≥–∞–º–∏ ‚Äî —à—É–Ω–∏ “≥–∞–º —Ç–µ–∫—à–∏—Ä–∏–± –æ–ª–∞–º–∏–∑
        is_allowed = await is_admin_or_owner(chat_id, user_id, context)

    if not is_allowed:
        await update.message.reply_text("‚ùå –ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –∞–¥–º–∏–Ω —ë–∫–∏ —Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–∞–∂–∞—Ä–∞–¥–∏.")
        return

    # '/add' —ë–∫–∏ '/ add' ‚Äî –∏–∫–∫–∞–ª–∞—Å–∏–Ω–∏ “≥–∞–º “õ—û–ª–ª–∞–π–º–∏–∑
    raw = update.message.text or ""
    m = re.match(r"^/\s*add\b\s*(.*)$", raw, flags=re.IGNORECASE | re.DOTALL)
    phrase = (m.group(1) if m else "").strip()

    if not phrase:
        await update.message.reply_text("–ò—à–ª–∞—Ç–∏—à: /add <—Ñ—Ä–∞–∑–∞>\n–ú–∏—Å–æ–ª: /add –ö–µ—Ä–∞–∫–ª–∏ —Ñ—Ä–∞–∑–∞–Ω–∏ “õ—û—à–∏–Ω–≥")
        return

    lower = phrase.lower()
    # –ò–ª–≥–∞—Ä–∏–≥–∏: if lower in all_keywords_lower():
    # –Ø–Ω–≥–∏—Å–∏: —Ñ–∞“õ–∞—Ç custom‚Äô–¥–∞ –±–æ—Ä-–π—û“õ–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    if lower in AD_CUSTOM_KEYWORDS:
        await update.message.reply_text("‚ö†Ô∏è –ë—É –∏–±–æ—Ä–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ñ–∏–ª—å—Ç—Ä–¥–∞ –±–æ—Ä.")
        return

    AD_CUSTOM_KEYWORDS.add(lower)
    try:
        save_custom_keywords()
    except Exception:
        pass

    await _reply_privately_or_here(
        update,
        context,
        f"‚úÖ –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω —Ñ—Ä–∞–∑–∞(–ª–∞—Ä) —Ñ–∏–ª—å—Ç—Ä–≥–∞ “õ—û—à–∏–ª–¥–∏: <code>{html.escape(phrase)}</code>",
        parse_mode="HTML",
    )

def _format_list(items: list[str] | set[str]) -> str:
    items = [x for x in (items or []) if str(x).strip()]
    if not items:
        return "‚Äî (–±—û—à)"
    unique_sorted = sorted(set(items), key=lambda s: s.lower())
    return "\n".join(f"‚Ä¢ {x}" for x in unique_sorted)


def _split_chunks(s: str, n: int = 3900):
    for i in range(0, len(s), n):
        yield s[i:i+n]

async def show_keywords(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    chat_id = update.message.chat_id
    user    = update.message.from_user
    user_id = user.id if user else None
    username = (user.username or "").lower() if user and user.username else ""

    # # –†—É—Ö—Å–∞—Ç
    # is_allowed = (user_id in ALLOWED_USER_IDS) or (username in ALLOWED_USERNAMES)
    # if not is_allowed and user_id is not None:
    #     is_allowed = await is_admin_or_owner(chat_id, user_id, context)
    # if not is_allowed:
    #     await update.message.reply_text("‚ùå –ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –∞–¥–º–∏–Ω —ë–∫–∏ —Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
    #     return

    # –§–∞–π–ª–¥–∞–Ω custom —Ä—û–π—Ö–∞—Ç–Ω–∏ —û“õ–∏–± –æ–ª–∞–º–∏–∑
    custom = []
    try:
        if KEYWORDS_FILE.exists():
            data = json.loads(KEYWORDS_FILE.read_text(encoding="utf-8"))
            if isinstance(data, list):
                custom = [str(x).strip() for x in data if str(x).strip()]
        else:
            custom = sorted(list(AD_CUSTOM_KEYWORDS))
    except Exception:
        custom = sorted(list(AD_CUSTOM_KEYWORDS))

    txt = "üóÇÔ∏è ad_keywords.json (custom):\n" + _format_list(custom)

    for chunk in _split_chunks(txt):
        await update.message.reply_text(chunk, disable_web_page_preview=True)

    # ‚úÖ “ö—û—à–∏–º—á–∞ –∏–∑–æ“≥
    await update.message.reply_text(
        "‚ÑπÔ∏è “≤–æ–∑–∏—Ä—á–∞ —Ñ–∏–ª—å—Ç—Ä–Ω–∏–Ω–≥ —Ç—û–ª–∏“õ —Ç–∞—Ä–∫–∏–±–∏ —à—É —Ñ—Ä–∞–∑–∞–ª–∞—Ä–¥–∞–Ω –∏–±–æ—Ä–∞—Ç.",
        disable_web_page_preview=True
    )


async def ins_help(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    # üîê /ins ‚Äî —Ñ–∞“õ–∞—Ç –∞–¥–º–∏–Ω/—Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏
    chat_id = update.message.chat_id
    user    = update.message.from_user
    user_id = user.id if user else None
    username = (user.username or "").lower() if user and user.username else ""

    is_allowed = (user_id in ALLOWED_USER_IDS) or (username in ALLOWED_USERNAMES)
    if not is_allowed and user_id is not None:
        is_allowed = await is_admin_or_owner(chat_id, user_id, context)
    if not is_allowed:
        await update.message.reply_text("‚ùå –ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –≥—É—Ä—É—Ö –∞–¥–º–∏–Ω–ª–∞—Ä–∏ —ë–∫–∏ —Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ “õ—û–ª–ª–∞–π –æ–ª–∞–¥–∏.")
        return

    help_html = (
        "<b>üìò –§–∏–ª—å—Ç—Ä-–±–æ—Ç –±—û–π–∏—á–∞ “õ–∏—Å“õ–∞—á–∞ –π—û—Ä–∏“õ–Ω–æ–º–∞</b>\n\n"
        "‚Ä¢ <b>/add &lt;—Ñ—Ä–∞–∑–∞&gt;</b> ‚Äî —Ñ–∏–ª—å—Ç—Ä–≥–∞ —è–Ω–≥–∏ –∏–±–æ—Ä–∞ “õ—û—à–∏—à.\n"
        "  –ú–∏—Å–æ–ª: <code>/add –ö–µ—Ä–∞–∫–ª–∏ —Ñ—Ä–∞–∑–∞ —ë–∫–∏ –∂—É–º–ª–∞–Ω–∏ “õ—û—à–∏–± —ë–∑–∏–Ω–≥</code>\n\n"
        "‚Ä¢ <b>/del &lt;—Ñ—Ä–∞–∑–∞&gt;</b> ‚Äî —Ñ–∏–ª—å—Ç—Ä–¥–∞–Ω –∫—û—Ä—Å–∞—Ç–∏–ª–≥–∞–Ω –∏–±–æ—Ä–∞–Ω–∏ —û—á–∏—Ä–∏—à.\–Ω"
        "  –ú–∏—Å–æ–ª: <code>/del –ö–µ—Ä–∞–∫–ª–∏ —Ñ—Ä–∞–∑–∞ —ë–∫–∏ –∂—É–º–ª–∞–Ω–∏ “õ—û—à–∏–± —ë–∑–∏–Ω–≥</code>\n\n"
        "‚Ä¢ <b>/show</b> ‚Äî “≥–æ–∑–∏—Ä–≥–∏ —Ñ–∏–ª—å—Ç—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –∫—û—Ä–∏—à.\n"
        "  –ú–∏—Å–æ–ª: <code>/show</code>\n\n"
        "‚Ä¢ <b>/ins</b> ‚Äî —à—É –π—û—Ä–∏“õ–Ω–æ–º–∞–Ω–∏ “õ–∞–π—Ç–∞ —á–∏“õ–∞—Ä–∞–¥–∏.\n\n\n"
        "<i>–≠—Å–ª–∞—Ç–º–∞–ª–∞—Ä:</i>\n\n"
        "‚Äî –§—Ä–∞–∑–∞–ª–∞—Ä <code>ad_keywords.json</code> –≥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏; “õ—û—à–∏–ª–≥–∞–Ω–¥–∞–Ω –∫–µ–π–∏–Ω –¥–∞—Ä“≥–æ–ª –∫—É—á–≥–∞ –∫–∏—Ä–∞–¥–∏.\n\n"
        "‚Äî –ì—É—Ä—É“≥–¥–∞ —Ñ–∞“õ–∞—Ç <b>–∞–¥–º–∏–Ω/—Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏</b> /add –≤–∞ /del –Ω–∏ –∏—à–ª–∞—Ç–∞–¥–∏.\n\n"
        "‚Äî Private —á–∞—Ç–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —û—á–∏—Ä–∏—à –π—û“õ, —É —Ñ–∞“õ–∞—Ç –≥—É—Ä—É“≥–ª–∞—Ä–Ω–∏ ‚Äú—Ç–æ–∑–∞–ª–∞—à‚Äù —É—á—É–Ω –π—û–ª–≥–∞ “õ—û–π–∏–ª–≥–∞–Ω."
    )

    for chunk in _split_chunks(help_html, 3800):
        await update.message.reply_text(help_html, parse_mode="HTML", disable_web_page_preview=True)
    # for chunk in _split_chunks(txt):
    #     await _reply_privately_or_here(
    #         update, context,
    #         f"<pre>{html.escape(chunk)}</pre>",
    #         parse_mode="HTML",
    #     )


async def del_keyword(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    chat_id = update.message.chat_id
    user    = update.message.from_user
    user_id = user.id if user else None
    username = (user.username or "").lower() if user and user.username else ""

    # üîì –†—É—Ö—Å–∞—Ç: ID/username —ë–∫–∏ –∞–¥–º–∏–Ω/—ç–≥–∞—Å–∏
    is_allowed = (user_id in ALLOWED_USER_IDS) or (username in ALLOWED_USERNAMES)
    if not is_allowed and user_id is not None:
        is_allowed = await is_admin_or_owner(chat_id, user_id, context)
    if not is_allowed:
        await update.message.reply_text("‚ùå –ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –∞–¥–º–∏–Ω —ë–∫–∏ —Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–∞–∂–∞—Ä–∞–¥–∏.")
        return

    # '/del' —ë–∫–∏ '/ del' ‚Äî –∏–∫–∫–∞–ª–∞—Å–∏–Ω–∏ “≥–∞–º “õ—û–ª–ª–∞–π–º–∏–∑
    raw = update.message.text or ""
    m = re.match(r"^/\s*del\b\s*(.*)$", raw, flags=re.IGNORECASE | re.DOTALL)
    phrase = (m.group(1) if m else "").strip()
    if not phrase:
        await update.message.reply_text("–ò—à–ª–∞—Ç–∏—à: /del <—Ñ—Ä–∞–∑–∞>\n–ú–∏—Å–æ–ª: /del –ö–µ—Ä–∞–∫–ª–∏ —Ñ—Ä–∞–∑–∞–Ω–∏ “õ—û—à–∏–Ω–≥")
        return

    lower = phrase.lower()

    # ‚ùó faqat CUSTOM —Ç—û–ø–ª–∞–º–¥–∞–Ω —û—á–∏—Ä–∏–ª–∞–¥–∏ (default‚Äô–≥–∞ —Ç–µ–≥–º–∞–π–º–∏–∑)
    if lower in AD_CUSTOM_KEYWORDS:
        AD_CUSTOM_KEYWORDS.remove(lower)
        try:
            save_custom_keywords()
        except Exception:
            pass
        await _reply_privately_or_here(
            update, context,
            f"üóëÔ∏è –é—á–∏—Ä–∏–ª–≥–∞–Ω —Ñ—Ä–∞–∑–∞–ª–∞—Ä: <code>{html.escape(phrase)}</code>",
            parse_mode="HTML",
        )
    else:
        # –ò—Ö—Ç–∏—ë—Ä–∏–π: —è“õ–∏–Ω –º–æ—Å–ª–∞—Ä (substring) —Ç–æ–ø–∏—à ‚Äî —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —ë—Ä–¥–∞–º —É—á—É–Ω
        similar = [k for k in sorted(AD_CUSTOM_KEYWORDS) if lower in k]
        if similar:
            preview = "\n".join(f"‚Ä¢ {s}" for s in similar[:20])
            await update.message.reply_text(
                "–¢—û–ª–∏“õ –º–æ—Å —Ñ—Ä–∞–∑–∞–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏. “ö—É–π–∏–¥–∞ —û—Ö—à–∞—à (substring) —ç–ª–µ–º–µ–Ω—Ç–ª–∞—Ä –±–æ—Ä:\n" + preview
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ë—É —Ñ—Ä–∞–∑–∞ custom —Ñ–∏–ª—å—Ç—Ä–ª–∞—Ä–¥–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")



async def seed_defaults(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    chat_id = update.message.chat_id
    user    = update.message.from_user
    user_id = user.id if user else None
    username = (user.username or "").lower() if user and user.username else ""

    # üîì –†—É—Ö—Å–∞—Ç: ID/username —ë–∫–∏ –∞–¥–º–∏–Ω/—ç–≥–∞—Å–∏
    is_allowed = (user_id in ALLOWED_USER_IDS) or (username in ALLOWED_USERNAMES)
    if not is_allowed and user_id is not None:
        is_allowed = await is_admin_or_owner(chat_id, user_id, context)
    if not is_allowed:
        await update.message.reply_text("‚ùå –ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –∞–¥–º–∏–Ω —ë–∫–∏ —Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–∞–∂–∞—Ä–∞–¥–∏.")
        return

async def _reply_privately_or_here(update: Update, context: CallbackContext, text: str, *, parse_mode: str = "HTML"):
    if not update.message:
        return
    msg = update.message
    chat = msg.chat
    user = msg.from_user
    user_id = user.id if user else None

    # –ì—É—Ä—É“≥/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ ‚Üí –∞–≤–≤–∞–ª–æ DM'–≥–∞ —É—Ä–∏–Ω–∞–º–∏–∑
    if chat.type in (ChatType.GROUP, ChatType.SUPERGROUP) and user_id:
        try:
            await context.bot.send_message(
                chat_id=user_id, text=text, parse_mode=parse_mode, disable_web_page_preview=True
            )
            # –ò—Ö—Ç–∏—ë—Ä–∏–π: –≥—É—Ä—É“≥–¥–∞ “õ–∏—Å“õ–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä “õ–æ–ª–¥–∏—Ä–∞–º–∏–∑
            await msg.reply_text("üì¨ –ñ–∞–≤–æ–± —à–∞—Ö—Å–∏–π —á–∞—Ç–∏–Ω–≥–∏–∑–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏.", quote=True)
            return
        except Forbidden:
            # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–æ—Ç –±–∏–ª–∞–Ω private'–¥–∞ /start “õ–∏–ª–º–∞–≥–∞–Ω
            bot_username = (context.bot.username or "").lstrip("@")
            deep = f"https://t.me/{bot_username}?start=hi" if bot_username else ""
            note = "‚ö†Ô∏è –ë–æ—Ç —Å–∏–∑–≥–∞ —à–∞—Ö—Å–∏–π–≥–∞ —ë–∑–∞ –æ–ª–º–∞–π–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –±–æ—Ç –±–∏–ª–∞–Ω private‚Äô–¥–∞ /start —é–±–æ—Ä–∏–Ω–≥."
            if deep:
                note += f"\nüëâ {deep}"
            await msg.reply_text(note)
            return
        except BadRequest:
            # –±–æ—à“õ–∞ —Ö–∞—Ç–æ –±—û–ª—Å–∞ ‚Äî –≥—É—Ä—É“≥–Ω–∏–Ω–≥ —û–∑–∏–≥–∞ –∂–∞–≤–æ–± “õ–∞–π—Ç–∞—Ä–∞–º–∏–∑
            pass

    # Private —á–∞—Ç —ë–∫–∏ DM —é–±–æ—Ä–∏—à –∞–º–∞–ª–≥–∞ –æ—à–º–∞–≥–∞–Ω ‚Äî —à—É —á–∞—Ç–Ω–∏–Ω–≥ —û–∑–∏–¥–∞
    await msg.reply_text(text, parse_mode=parse_mode, disable_web_page_preview=True)


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö –∏ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Å—ã–ª–æ–∫
def contains_hidden_link(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–µ Telegram-—Å—Å—ã–ª–∫–∏,
       –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –≥—Ä—É–ø–ø—ã -1001294217711."""
    if not update.message:
        return False

    chat_id = update.message.chat.id
    text    = update.message.text    or ""
    caption = update.message.caption or ""

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
    hidden_md   = r"\[.*?\]\((https?://\S+)\)"
    hidden_html = r'<a href=["\'](https?://\S+)["\']>.*?</a>'
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö t.me —Å—Å—ã–ª–æ–∫
    tg_link     = r"(?:https?://)?t\.me/\S+"

    # –ï—Å–ª–∏ —á–∞—Ç ‚Äî –Ω–∞—à–∞ ‚Äú–±–µ–ª–∞—è‚Äù –≥—Ä—É–ø–ø–∞, –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º–æ–π/–Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
    if chat_id == -1001294217711:
        return False

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö: –µ—Å–ª–∏ –Ω–∞—à—ë–ª —Å–∫—Ä—ã—Ç—É—é –∏–ª–∏ –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî True
    if (
        re.search(hidden_md,   text) or
        re.search(hidden_html, text) or
        re.search(hidden_md,   caption) or
        re.search(hidden_html, caption) or
        re.search(tg_link,     text) or
        re.search(tg_link,     caption)
    ):
        return True

    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
async def is_admin_or_owner(chat_id: int, user_id: int, context: CallbackContext) -> bool:
    # 0) “≤–∞–º–∏—à–∞-—Ä—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω ID ‚Üí –¥–∞—Ä—Ä–æ–≤ True
    if user_id in ALLOWED_USER_IDS:
        return True

    # 1) Private —á–∞—Ç: –∞–¥–º–∏–Ω–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –π—û“õ. –ß–∞—Ç —ç–≥–∞—Å–∏ = —û–∑–∏.
    #    Private–¥–∞ –æ–¥–∞—Ç–¥–∞ chat_id == user_id –±—û–ª–∞–¥–∏.
    if chat_id > 0:  # –º–∞–Ω—Ñ–∏–π bo'lsa supergroup/channel
        return user_id == chat_id

    # 2) –ì—É—Ä—É“≥/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞–¥–∞ –æ–¥–∞—Ç–∏–π –∞–¥–º–∏–Ω —Ç–µ–∫—à–∏—Ä—É–≤–∏
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        for admin in admins:
            if admin.user.id == user_id and isinstance(admin, (ChatMemberAdministrator, ChatMemberOwner)):
                return True
    except Exception as e:
        print(f"–ê–¥–º–∏–Ω —Ç–µ–∫—à–∏—Ä—É–≤–∏–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç '. —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ'
def contains_group_join_message(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç '. —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ'."""
    if update.message:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if bool(update.message.new_chat_members):
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å '. —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ'
        text = update.message.text or ""
        if text.strip() == " —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ":
            return True

    return False

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ –ª—é–±–æ–π –≥—Ä—É–ø–ø–µ)
def contains_prohibited_words(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."""
    if not update.message:
        return False

    text    = update.message.text    or ""
    caption = update.message.caption or ""
    lower_text    = text.lower()
    lower_caption = caption.lower()
    prohibited = ["—Å–µ–∫—Å", "–ø–æ—Ä–Ω–æ", "sex", "porno", "real sex"]

    # –ï—Å–ª–∏ –ª—é–±–æ–µ –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ ‚Äî –ø–æ–º–µ—á–∞–µ–º True
    for word in prohibited:
        if word in lower_text or word in lower_caption:
            return True

    return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_specific_bot_messages(update: Update, context: CallbackContext) -> None:
    if not update.message:
        return

    msg_text = update.message.text or ""
    chat = update.message.chat

    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–Ω–∏ “≥–µ—á “õ–∞—á–æ–Ω —û—á–∏—Ä–º–∞–π–º–∏–∑
    if re.match(r"^/\s*(add|del|show|ins)\b", msg_text, flags=re.IGNORECASE):
        return

    chat = update.message.chat
    msg_text = update.message.text or ""

    # üîï Private —á–∞—Ç–¥–∞ —É–º—É–º–∞–Ω —û—á–∏—Ä–º–∞–π–º–∏–∑ (–≥—É—Ä—É“≥ —Ç–æ–∑–∞–ª–∞—à —É—á—É–Ω –∫–µ—Ä–∞–∫)
    if chat.type == ChatType.PRIVATE:
        return

    # üîí /add —ë–∫–∏ / add –±—É–π—Ä—É“õ–ª–∞—Ä–∏ “≥–µ—á “õ–∞—á–æ–Ω —û—á–∏—Ä–∏–ª–º–∞–π–¥–∏
    if re.match(r"^/\s*add\b", msg_text, flags=re.IGNORECASE):
        return

    global request_counter
    request_counter += 1

    # üîí “ö–∞–π—Ç–∞-–∏—Ö—Ç–∏—ë—Ç guard
    if msg_text.startswith("/add"):
        print(f"[{request_counter}] /add –±—É–π—Ä—É“ì–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏, —û—á–∏—Ä–∏–ª–º–∞–π–¥–∏.")
        return

    try:
        chat_title = update.message.chat.title if update.message.chat.title else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        chat_id = update.message.chat_id
        sender_username = update.message.from_user.username if update.message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        sender_id = update.message.from_user.id if update.message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        sender_is_bot = update.message.from_user.is_bot if update.message.from_user else False

        print(f"[{request_counter}] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{sender_username}, ID: {sender_id}, –ì—Ä—É–ø–ø–∞: '{chat_title}' (ID: {chat_id})")
        print(f"[{request_counter}] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
        print(f"[{request_counter}] –¢–∏–ø —á–∞—Ç–∞: {update.message.chat.type}")

        # -1. –†—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω username
        if sender_username and sender_username.lower() == ALLOWED_USER_NAME.lower():
            print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{ALLOWED_USER_NAME} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return

        # 0. –†—É—Ö—Å–∞—Ç —ç—Ç–∏–ª–≥–∞–Ω ID
        if sender_id in ALLOWED_USER_IDS:
            print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return

        # 1. –ê–¥–º–∏–Ω/—ç–≥–∞ ‚Äî —û—á–∏—Ä–º–∞–π–º–∏–∑
        if await is_admin_or_owner(chat_id, sender_id, context):
            print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã.")
            return

        # 2. –ë–æ—Ç–¥–∞–Ω –∫–µ–ª—Å–∞ ‚Äî —û—á–∏—Ä–∏—à
        if sender_is_bot:
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ @{sender_username} —É–¥–∞–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ '{chat_title}'.")
            return

        # 3. @mention ‚Äî —û—á–∏—Ä–∏—à
        if contains_mention_link(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º @{sender_username} —É–¥–∞–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ '{chat_title}'.")
            return

        # 4. –†–µ–∫–ª–∞–º–∞/URL ‚Äî —û—á–∏—Ä–∏—à
        if contains_advertisement(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ '{chat_title}'.")
            return

        # 5. –ì—É—Ä—É“≥–≥–∞ “õ—û—à–∏–ª–≥–∞–Ω–ª–∏–≥–∏ “≥–∞“õ–∏–¥–∞–≥–∏ —Å–∏—Å—Ç–µ–º —Ö–∞–±–∞—Ä ‚Äî —û—á–∏—Ä–∏—à
        if contains_group_join_message(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] '. —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ' —ë–∫–∏ “õ—û—à–∏–ª–∏—à —Ö–∞–±–∞—Ä–∏–Ω–∏ —û—á–∏—Ä–¥–∏–∫.")
            return

        # 6. –Ø—à–∏—Ä–∏–Ω/—Ç–µ–ª–µ–≥—Ä–∞–º –ª–∏–Ω–∫ ‚Äî —û—á–∏—Ä–∏—à
        if contains_hidden_link(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] –Ø—à–∏—Ä–∏–Ω/—Ç–µ–ª–µ–≥—Ä–∞–º “≥–∞–≤–æ–ª–∞–ª–∏ —Ö–∞–±–∞—Ä —û—á–∏—Ä–∏–ª–¥–∏ –•–û–ù–ò–ú.")
            return

        # 7. –¢–∞—ä“õ–∏“õ–ª–∞–Ω–≥–∞–Ω —Å—û–∑–ª–∞—Ä ‚Äî —û—á–∏—Ä–∏—à
        if contains_prohibited_words(update):
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            print(f"[{request_counter}] –£–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
            return

        print(f"[{request_counter}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ (–Ω–µ –æ—Ç –±–æ—Ç–∞, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()

    # üëâ –ê–≤–≤–∞–ª –∫–æ–º–∞–Ω–¥–∞, –∫–µ–π–∏–Ω —É–º—É–º–∏–π —Ñ–∏–ª—å—Ç—Ä
    application.add_handler(CommandHandler("add", add_keyword))
    application.add_handler(MessageHandler(filters.Regex(r"^/\s*add\b"), add_keyword))

    application.add_handler(CommandHandler("show", show_keywords))
    application.add_handler(MessageHandler(filters.Regex(r"^/\s*show\b"), show_keywords))

    application.add_handler(CommandHandler("del", del_keyword))
    application.add_handler(MessageHandler(filters.Regex(r"^/\s*del\b"), del_keyword))

    application.add_handler(CommandHandler("ins", ins_help))
    application.add_handler(MessageHandler(filters.Regex(r"^/\s*ins\b"), ins_help))

    application.add_handler(MessageHandler(filters.ALL, delete_specific_bot_messages))  # ‚Üê –±–∏—Ç—Ç–∞–≥–∏–Ω–∞ ALL “õ–æ–ª—Å–∏–Ω

    async def on_error(update: object, context: CallbackContext) -> None:
        print(f"PTB error: {context.error!r}")

    application.add_error_handler(on_error)

    if FULL_WEBHOOK_URL and is_valid_public_https(FULL_WEBHOOK_URL):
        # Heroku —É—á—É–Ω Webhook'–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∞–º–∏–∑
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.getenv("PORT", 5000)),
            url_path=WEBHOOK_PATH,  # –ª–æ–∫–∞–ª —Ä–æ—É—Ç
            webhook_url=FULL_WEBHOOK_URL,  # —Ç–∞—à“õ–∏ HTTPS
        )
    else:
        print("‚ö†Ô∏è WEBHOOK URL –π—û“õ —ë–∫–∏ –Ω–æ—Ç—û“ì—Ä–∏. Polling —Ä–µ–∂–∏–º–∏–≥–∞ —û—Ç–∏–ª–¥–∏.")
        application.run_polling()


if __name__ == "__main__":
    main()